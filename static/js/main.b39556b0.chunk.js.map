{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_ALPHABETICALLY","SORT_LENGTH","App","useState","sortField","setSortField","query","setIsReverseField","visibleGoods","goods","listOfPreparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","isOriginalOrder","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAEIC,EAAsB,qBACtBC,EAAc,cA2Bb,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAmCF,oBAAS,GAA5C,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EA7BR,SAA0BC,EAAOL,EAAWE,GAC1C,IAAMI,EAAmB,YAAOD,GAqBhC,OAnBIL,IACFM,EAAoBC,MAAK,SAACC,EAAOC,GAC/B,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAITT,GACFI,EAAoBM,WAIjBN,EAOcO,CAAiBlB,EAAiBK,EAAWE,GAE5DY,EAAgC,KAAdd,IAAqBE,EAE7C,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYjB,IAAcJ,IAE5BsB,QAAS,WACPjB,EAAaL,GACbO,GAAkB,IAPtB,iCAaA,wBACEa,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYjB,IAAcH,IAE5BqB,QAAS,WACPjB,EAAaJ,GACbM,GAAkB,IAPtB,4BAaA,wBACEa,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYf,IAEdgB,QAAS,WACPf,GAAmBD,GACnBD,EAAa,KAPjB,sBAaEa,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAa,IACbE,GAAkB,IALtB,sBAaJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC5GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b39556b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\nconst SORT_ALPHABETICALLY = 'alphabetical order';\nconst SORT_LENGTH = 'length sort';\n\nfunction getPreparedGoods(goods, sortField, query) {\n  const listOfPreparedGoods = [...goods];\n\n  if (sortField) {\n    listOfPreparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SORT_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n\n    if (query) {\n      listOfPreparedGoods.reverse();\n    }\n  }\n\n  return listOfPreparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [query, setIsReverseField] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, query);\n\n  const isOriginalOrder = sortField === '' && !query;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortField !== SORT_ALPHABETICALLY,\n          })}\n          onClick={() => {\n            setSortField(SORT_ALPHABETICALLY);\n            setIsReverseField(false);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortField !== SORT_LENGTH,\n          })}\n          onClick={() => {\n            setSortField(SORT_LENGTH);\n            setIsReverseField(false);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': query,\n          })}\n          onClick={() => {\n            setIsReverseField(!query);\n            setSortField('');\n          }}\n        >\n          Reverse\n        </button>\n\n        {!isOriginalOrder && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setIsReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}